import java.util.* ;
import java.io.*; 
public class Solution {
    public static long getInversions(long arr[], int n) {
        return mergeSort(0, n-1, arr);
    }
    public static long mergeSort(int low, int high, long arr[]) {
        long count = 0;
        if(low >= high) return count;
        int mid = (low+high)/2;
        count += mergeSort(low, mid, arr);
        count += mergeSort(mid+1, high, arr);
        count += merge(low, mid, high, arr);
        return count;
    }
    public static long merge(int low, int mid, int high, long arr[]) {
        long count = 0;
        List<Long> temp = new ArrayList<>();
        int left = low, right = mid+1;
        while(left <= mid && right <= high) {
            if(arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            }
            else {
                count += mid-left+1;
                temp.add(arr[right]);
                right++;
            }
        }
        while(left <= mid) {
            temp.add(arr[left]);
            left++;
        }
        while(right <= high) {
            temp.add(arr[right]);
            right++;
        }
        for(int i=low ; i<=high ; i++) {
            arr[i] = temp.get(i-low);
        }
        return count;
    }
}
