import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution 
{
    public static int merge(int low, int mid, int high, ArrayList<Integer> arr) {
        int count = 0;
        int left, right;
        for(left=low, right=mid+1 ; left<=mid ; left++) {
            int num1 = arr.get(left);
            while(right<=high && num1 > 2*arr.get(right)) {
                right++;
            }
            count += (right-(mid+1));
        }
        left = low;
        right = mid+1;
        ArrayList<Integer> temp = new ArrayList<>();
        while(left <= mid && right <= high) {
            int num1 = arr.get(left), num2 = arr.get(right);
            if(num1 <= num2) {
                temp.add(num1);
                left++;
            }
            else {
                temp.add(num2);
                right++;
            }
        }
        while(left <= mid) {
            temp.add(arr.get(left));
            left++;
        }
        while(right <= high) {
            temp.add(arr.get(right));
            right++;
        }
        for(int i=low ; i<=high ; i++) {
            arr.set(i, temp.get(i-low));
        }
        return count;
    }
    public static int mergeSort(int low, int high, ArrayList<Integer> arr) {
        int count = 0;
        if(low >= high) return count;
        int mid = (low+high)/2;
        count += mergeSort(low, mid, arr);
        count += mergeSort(mid+1, high, arr);
        count += merge(low, mid, high, arr);
        return count;
    }
    public static int reversePairs(ArrayList<Integer> arr) 
    {
        return mergeSort(0, arr.size()-1, arr);
    }
}
